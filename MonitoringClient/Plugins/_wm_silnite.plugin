#!/bin/zsh --no-rcs
# shellcheck shell=bash

# PLUGIN: WM silnite (with SOFA Integration)
# AUTHOR: DAN MONGE @MACITPROS
# DATE:   AUG/11/2025

# This script now uses the SOFA feed (by Graham Pugh) for more accurate, OS-aware
# version checking, while retaining the original script's alerting logic.

# --- Settings and Cache ---
SILSETTINGS='/Library/MonitoringClient/PluginSupport/_wm_silnite_settings.plist'
online_json_url="https://sofafeed.macadmins.io/v1/macos_data_feed.json"
user_agent="SOFA-wm-silnite-Integration/1.1"
json_cache_dir="/private/var/tmp/sofa"
json_cache="$json_cache_dir/macos_data_feed.json"
etag_cache="$json_cache_dir/macos_data_feed_etag.txt"
etag_cache_temp="$json_cache_dir/macos_data_feed_etag_temp.txt"

# Ensure local cache folder exists
/bin/mkdir -p "$json_cache_dir"

# --- Fetch Latest SOFA Data (with caching) ---
if [[ -f "$etag_cache" && -f "$json_cache" ]]; then
    etag_old=$(/bin/cat "$etag_cache")
    /usr/bin/curl --compressed --silent --etag-compare "$etag_cache" --etag-save "$etag_cache_temp" --header "User-Agent: $user_agent" "$online_json_url" --output "$json_cache"
    etag_temp=$(/bin/cat "$etag_cache_temp")
    if [[ "$etag_old" != "$etag_temp" && $etag_temp != "" ]]; then
        /bin/mv "$etag_cache_temp" "$etag_cache"
    else
        /bin/rm "$etag_cache_temp"
    fi
else
    /usr/bin/curl --compressed --location --max-time 3 --silent --header "User-Agent: $user_agent" "$online_json_url" --etag-save "$etag_cache" --output "$json_cache"
fi

# --- OS Version Detection ---
# Autoload is-at-least module for version comparisons
autoload is-at-least

# Get current system OS version
currentos=$(/usr/bin/sw_vers -productVersion)
system_os_major=$(cut -d. -f1 <<< "$currentos")

# Exit if OS is older than macOS 12 (plutil requirement)
if ! is-at-least 12 "$system_os_major"; then
    echo "Unsupported macOS version ($currentos). Requires macOS 12+."
    exit 0
fi

# --- Determine Update Status with SOFA Data ---
# Find the latest product version for the current major OS
product_version=""
release_date_str=""
for i in {0..5}; do
    # Get the latest product version for the current OS in the feed
    product_version_from_feed=$(/usr/bin/plutil -extract "OSVersions.$i.Latest.ProductVersion" raw "$json_cache" 2>/dev/null | /usr/bin/head -n 1)
    
    # Get the major version from the feed's product version
    feed_os_major=$(cut -d. -f1 <<< "$product_version_from_feed")

    # Check if it matches the system's current major OS version
    if [[ "$feed_os_major" == "$system_os_major" ]]; then
        product_version="$product_version_from_feed"
        # Get the release date for the day-counting logic, stripping the time
        release_date_str=$(/usr/bin/plutil -extract "OSVersions.$i.Latest.ReleaseDate" raw "$json_cache" | head -n 1 | sed 's/T.*//')
        break
    fi
done

# If no matching OS was found in the feed, exit cleanly
if [[ -z "$product_version" ]]; then
    echo "Could not determine latest version for macOS $system_os_major. Exiting."
    exit 0
fi
# Set update status based on the comparison
if is-at-least "$product_version" "$currentos"; then
    updatestatus="Up-to-date"
else
    updatestatus="Update available"
fi


# --- Main Script Logic (Alerting and Exits) ---

# Updates available - Email/ticket created if updates to the OS are available
if [[ "$updatestatus" == "Update available" ]]; then
    if [ -n "$release_date_str" ]; then
        # Convert release date and current date to seconds since epoch to compare
        release_date_seconds=$(date -j -f "%Y-%m-%d" "$release_date_str" "+%s" 2>/dev/null)
        current_date_seconds=$(date "+%s")

        # If date conversion was successful, calculate the age of the update
        if [ -n "$release_date_seconds" ]; then
            days_since_release=$(( (current_date_seconds - release_date_seconds) / 86400 ))

            PENDINGUPDATE="Pending Update: $(/usr/bin/defaults read /Library/Preferences/com.apple.SoftwareUpdate.plist RecommendedUpdates 2>/dev/null| grep "Display Name" | awk -F= '{print $2}' | sed 's/"//g' | sed 's/;//g')"

            # If update is 8 days old or less, exit with informational status
            if [ "$days_since_release" -le 8 ]; then
                echo "There are OS updates available, released within the last 8 days.\nReleased on $release_date_str\n\nCurrent OS version: $currentos\n$PENDINGUPDATE\n\n Running Software Update from System Settings/Preferences or pushing via an MDM will be required to install the update that is pending."
                exit 20
            fi
        fi
    fi

    # If the release date can't be determined or if the update is older than 8 days, create a ticket.
    PENDINGUPDATE="Pending Update: $(/usr/bin/defaults read /Library/Preferences/com.apple.SoftwareUpdate.plist RecommendedUpdates 2>/dev/null| grep "Display Name" | awk -F= '{print $2}' | sed 's/"//g' | sed 's/;//g')"
    echo "There are OS updates available for more than 8 days!\nReleased on $release_date_str\n\nCurrent OS version: $currentos\n$PENDINGUPDATE\n\nRunning Software Update from System Settings/Preferences or pushing via an MDM will be required to install the update that is pending."
    exit 2
fi

# All good, nothing to see here.
if [[ "$updatestatus" == "Up-to-date" ]]; then
    defaults write $SILSETTINGS Unable_to_Check_Count 0
    echo "All looks good. No pending updates.\nLatest Release Date: $release_date_str\n\nCurrent OS version: $currentos \n\n "
    exit 0
fi