#!/bin/sh

# PLUGIN: WM silnite
# AUTHOR: DAN MONGE @MACITPROS
# DATE:   MAR/13/2024

# Shout out to Ross Matsuda of https://www.sudoade.com/author/ross/
# for the excellent write up on how to get the latest OS version updates.

# Takes a bit of time to run. Only runs per the 'Frequency to check for updates' set in Preference Pane.
# Emails daily (exit 2) for updates available. Displays if:
# * MRT is out of date
# * XProtect Remediator is out of date
# * XProtect is out of date
#
# If unable to check for updates, shows informational warning (exit 20),
# along with installed versions of
# * MRT 
# * XProtect Remediator
# * XProtect
#
# Sends one-time alerts (exit 200) for:
# * SIP Disabled
# * XProtect Disabled
#

# Check if silnite is installed. If it is not, exit without running
if [ ! -f /usr/local/bin/silnite ]; then
	exit 25
fi

# Read existing settings file
SILSETTINGS='/Library/MonitoringClient/PluginSupport/_wm_silnite_settings.plist'
SILRESULTS='/Library/MonitoringClient/PluginSupport/_wm_silnite_results.txt'

# OS Version Detection - used from https://www.sudoade.com/software-update-bugged-fact/
softwareupdatelist="$(curl -m 5 -sfL 'https://gdmf.apple.com/v2/pmv')"
# Strip out all content before first mention of "macOS"
macOSonly=${softwareupdatelist#*macOS} 
# Get only macOS versions
speedTruncation="$(echo "$macOSonly" | tr , '\n' | grep "ProductVersion" | sed '/iOS/q' | sed '$d' | awk -FProductVersion '{print $2}' | sed 's/"//g' | sed 's/://g')"
# Get current OS
currentos="$(defaults read /System/Library/CoreServices/SystemVersion.plist ProductVersion)"
# Set variable if update is or is not available
# updatestatus=$(echo "$speedTruncation" | grep -qx "$currentos" && echo "Up-to-date" || echo "Update available")
updatestatus=$(echo "$currentos" | grep -qx "$speedTruncation" && echo "Up-to-date" || echo "Update available")

# Default Check for update attempts
CHECKUPDATEDEFAULT="8"

# If the silnite results file does not exist, settings to defaults.
if [ ! -f "$SILRESULTS" ]; then
	touch $SILSETTINGS
	defaults write $SILSETTINGS Run_Count 1
	RUNCOUNT="$(defaults read $SILSETTINGS Run_Count)"
	defaults write $SILSETTINGS First_Run -bool true
	FIRSTRUN="$(defaults read $SILSETTINGS First_Run)"
	defaults write $SILSETTINGS Unable_to_Check_Count 0
	defaults write $SILSETTINGS Check_For_Updates $CHECKUPDATEDEFAULT
	CHECKUPDATE="$(defaults read $SILSETTINGS Check_For_Updates)"
	defaults write $SILSETTINGS Warn_Updates_Attempts 2
	defaults write $SILSETTINGS PrefPaneVisibility true
	chmod 644 $SILSETTINGS
	/usr/local/bin/silnite ax > /Library/MonitoringClient/PluginSupport/_wm_silnite_results.txt
else
	# Make sure the Preference Pane is visible
	defaults write $SILSETTINGS PrefPaneVisibility true
	
	# Set correct permissions for settings file
	chmod 644 $SILSETTINGS
	
	# Reads current run count
	RUNCOUNT="$(defaults read $SILSETTINGS Run_Count)"
	
	# Reads if this is the first run, which will force a full run
	FIRSTRUN="$(defaults read $SILSETTINGS First_Run)"
		[ -z "$FIRSTRUN" ] && defaults write $SILSETTINGS First_Run -bool true && chmod 644 $SILSETTINGS
	
	# Reads the number of times a warning (informational) alert was sent
	WARNRUNCOUNT="$(defaults read $SILSETTINGS Unable_to_Check_Count)"
		[ -z "$WARNRUNCOUNT" ] && defaults write $SILSETTINGS Unable_to_Check_Count 0 && chmod 644 $SILSETTINGS
	
	# Reads Check for Updates Setting
	CHECKUPDATE="$(defaults read $SILSETTINGS Check_For_Updates)"
		[ -z "$CHECKUPDATE" ] && defaults write $SILSETTINGS Check_For_Updates $CHECKUPDATEDEFAULT && chmod 644 $SILSETTINGS
	
	# Reads Warn Updates Setting
	WARNATTEMPTS="$(defaults read $SILSETTINGS Warn_Updates_Attempts)"
		[ -z "$WARNATTEMPTS" ] && defaults write $SILSETTINGS Warn_Updates_Attempts 2 && chmod 644 $SILSETTINGS
fi

# Runs silnite as xml and gets the information to set as a variable, also including
# any erros that may be present.
# First run of plugin
if (( $RUNCOUNT >= $CHECKUPDATE )) || [[ "$FIRSTRUN" = 1 ]]; then

# Write silnite results to a file so it can be read during every run
/usr/local/bin/silnite ax > /Library/MonitoringClient/PluginSupport/_wm_silnite_results.txt
	defaults write $SILSETTINGS Run_Count 1
	defaults write $SILSETTINGS First_Run -bool false
	chmod 644 $SILSETTINGS
else
	RUNCOUNT=$((RUNCOUNT + 1))
	# Previous installation
	defaults write $SILSETTINGS Run_Count $RUNCOUNT
	chmod 644 $SILSETTINGS
fi
# Read the results file
SILNITE=$(cat /Library/MonitoringClient/PluginSupport/_wm_silnite_results.txt)

# Finds if there are updates waiting.
# If there are updates, will provide a list of available updates.
UPDATESWAITING=$(echo "${SILNITE}" | grep UpdateWaiting)
#if [[ "$UPDATESWAITING" == *"UpdateWaiting = 1"* ]]; then
#fi

## Malware Removal Tool
# Finds MRT Version installed
MRTVERSION=$(echo "${SILNITE}" | grep MRTV\ \= | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Finds MRT Version available to update too.
MRTAVIL=$(echo "${SILNITE}" | grep MRTE | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Fallback if silnite was unable to check for updates
MRTCURRENT=$(echo "${SILNITE}" | grep MRTVer | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Checks is MRT is out of date
if [ "$MRTVERSION" != "$MRTAVIL" ]; then
MRTRESULT="MRT is out-of-date!\nCurrent version is $MRTVERSION\nAvailable version is $MRTAVIL"
else
MRTRESULT="MRT is up-to-date"
fi

## XProtect Remediator
# Finds XProtect Remediator Version installed
XPRVERSION=$(echo "${SILNITE}" | grep XPremV | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Finds Gatekeeper Version available to update too.
XPRAVIL=$(echo "${SILNITE}" | grep XPremE | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Fallback If silnite was unable to check for updates
XPRCURRENT=$(echo "${SILNITE}" | grep XpremVer | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Checks is Gatekeeper is out of date
if [ "$XPRVERSION" != "$XPRAVIL" ]; then
XPRRESULT="XProtect Remediator is out-of-date!\nCurrent version is $XPRVERSION\nAvailable version is $XPRAVIL"
else
XPRRESULT="XProtect Remediator is up-to-date"
fi

## XProtect
# Finds XProtect Version installed
XPVERSION=$(echo "${SILNITE}" | grep XProtectV | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Finds XProtect Version available to update too.
XPAVIL=$(echo "${SILNITE}" | grep XProtectE | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Fallback if silnite was unable to check for updates
XPCURRENT=$(echo "${SILNITE}" | grep XproVer | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Checks if XProtect is out of date
if [ "$XPVERSION" != "$XPAVIL" ]; then
XPRESULT="XProtect is out-of-date!\nCurrent version is $XPVERSION\nAvailable version is $XPAVIL"
else
XPRESULT="XProtect is up-to-date"
fi

## SIP
# Cleans up the SIP Value. Also sets all to lower case, silnite for some reason give UC on Apple Silicon, and LC on Intel.
# tr sets all to lowercase.
SIPVALUE=$(echo "${SILNITE}" | grep -E System | grep -E Integrity | sed 's/^.*: //' | tr '[:upper:]' '[:lower:]')
## XProtect
XPVALUE=$(echo "${SILNITE}" | grep XPro\ \= | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')

# SIP status for dashboard.
if [[ "$SIPVALUE" = enabled* ]]; then
SIPSTATUS="SIP is enabled (woohoo)"
else
SIPSTATUS="SIP is disabled (boohoo)"
fi

# XProtect status for dashboard.
if [[ "$XPVALUE" == 1 ]]; then
XPSTATUS="XProtect is enabled (yah)"
else
XPSTATUS="XProtect is disabled (boo)"
fi

if [[ "$XPVALUE" != 1 ]] || [[ "$SIPVALUE" != enabled* ]]; then
echo "SIP or XProtect is disabled!\n$XPSTATUS\n$SIPSTATUS"
exit 200
fi

# Updates available - Email/ticket created if updates to the OS are available
if [[ "$updatestatus" == *"Update available"* ]]; then
PENDINGUPDATE="Pending Update: $(/usr/bin/defaults read /Library/Preferences/com.apple.SoftwareUpdate.plist RecommendedUpdates 2>/dev/null| grep "Display Name" | awk -F= '{print $2}' | sed 's/"//g' | sed 's/;//g')"
echo "There are OS updates available!\n\nCurrent OS version: $currentos\n$PENDINGUPDATE\n\nCurrent Run Count: $RUNCOUNT\nFull Run Frequency: $CHECKUPDATE\n\n$MRTRESULT\n$XPRRESULT\n$XPRESULT\n\nRunning Software Update from System Settings/Preferences or pushing via an MDM will be required to install the update that is pending."
exit 2
fi

# Other updates available - Informational if any updates are available
if [[ "$UPDATESWAITING" == *"UpdateWaiting = 1"* ]]; then
PENDINGUPDATE="Pending Update: $(/usr/bin/defaults read /Library/Preferences/com.apple.SoftwareUpdate.plist RecommendedUpdates 2>/dev/null| grep "Display Name" | awk -F= '{print $2}' | sed 's/"//g' | sed 's/;//g')"
echo "There are other updates available!\n\nCurrent OS version: $currentos\n$PENDINGUPDATE\n\nCurrent Run Count: $RUNCOUNT\nFull Run Frequency: $CHECKUPDATE\n\n$MRTRESULT\n$XPRRESULT\n$XPRESULT\n\nRunning 'silnite au' from the computer (via Terminal/RMM/ARD) will show all available updates AND install any pending updates that do not require a restart."
exit 20
fi

# All good, nothing to see here.
if [[ "$UPDATESWAITING" == *"UpdateWaiting = 0"* ]]; then
defaults write $SILSETTINGS Unable_to_Check_Count 0
echo "All looks good. No pending updates.\n\nCurrent OS version: $currentos\n\n$MRTRESULT\n$XPRRESULT\n$XPRESULT\n\nPlus...\n$XPSTATUS\n$SIPSTATUS\n\nCurrent Run Count: $RUNCOUNT\nFull Run Frequency: $CHECKUPDATE"
exit 0
fi