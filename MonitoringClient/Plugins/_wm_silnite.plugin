#!/bin/sh

# PLUGIN: WM silnite
# AUTHOR: DAN MONGE @MACITPROS
# DATE:   JULY/31/2019

# Takes a bit of time to run. Only runs per the 'Frequency to check for updates' set in Preference Pane.
# Emails daily (exit 2) for updates available. Displays if:
# * MRT is out of date
# * Gatekeeper is out of date
# * XProtect is out of date
#
# If unable to check for updates, shows informational warning (exit 20),
# along with installed versions of
# * MRT 
# * Gatekeeper
# * XProtect
#
# Sends one-time alerts (exit 200) for:
# * SIP Disabled
# * XProtect Disabled

# Settings file
SILSETTINGS='/Library/MonitoringClient/PluginSupport/_wm_silnite_settings.plist'

# Reads run count
RUNCOUNT="$(defaults read $SILSETTINGS Run_Count)"

# Reads if this is the first run, which will force a full run
FIRSTRUN="$(defaults read $SILSETTINGS First_Run)"

# Reads the number of times a warning (informational) alert was sent
WARNRUNCOUNT="$(defaults read $SILSETTINGS Unable_to_Check_Count)"

# Reads Check for Updates
CHECKUPDATE="$(defaults read $SILSETTINGS Check_For_Updates)"

# Reads Warn Updates Setting
WARNATTEMPTS="$(defaults read $SILSETTINGS Warn_Updates_Attempts)"

# Check if silnite is installed. If it is not, exit without running
if [ ! -f /usr/local/bin/silnite ]; then
    exit 25
fi


# Runs silnite as xml and gets the information to set as a variable, also including
# any erros that may be present.
if (( $RUNCOUNT >= $CHECKUPDATE )) || [[ "$FIRSTRUN" = 1 ]]; then
SILNITE="$(/usr/local/bin/silnite ax 2>&1)"
defaults write $SILSETTINGS Run_Count 1
defaults write $SILSETTINGS First_Run -bool false
chmod 644 $SILSETTINGS
else
RUNCOUNT=$((RUNCOUNT + 1))
defaults write $SILSETTINGS Run_Count $RUNCOUNT
chmod 644 $SILSETTINGS
exit 25
fi

### Need to add this check in as well (see below)
#------

## Test if connection raw.githubusercontent.com via port 443 is possible
#CONNECTRESULT="$(nc -vz raw.githubusercontent.com 443 2>&1)"

#if [[ "$CONNECTRESULT" == *"succeeded"* ]]; then

## If there is a successfully connection, run normally.
#SILNITE="$(/usr/local/bin/silnite ax)"
#else

## Failing to connect runs silnite in "bmx" mode.
#SILNITE="$(/usr/local/bin/silnite bmx)"
#fi

#------

# Runs silnite as xml and gets the information to set as a variable
if [[ "$SILNITE" == *"App Transport Security has blocked"* ]]; then
# If there is not a connection run "bmx" mode.
SILNITE="$(/usr/local/bin/silnite bmx)"
fi


# Finds if there are updates waiting.
# If there are updates, will provide a list of available updates.
UPDATESWAITING=$(echo "${SILNITE}" | grep UpdateWaiting)
if [[ "$UPDATESWAITING" == *"UpdateWaiting = 1"* ]]; then
PENDINGUPDATE="$(softwareupdate -l --include-config-data | grep '\*')"
fi

## Malware Removal Tool
# Finds MRT Version installed
MRTVERSION=$(echo "${SILNITE}" | grep MRTV\ \= | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Finds MRT Version available to update too.
MRTAVIL=$(echo "${SILNITE}" | grep MRTE | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Fallback if silnite was unable to check for updates
MRTCURRENT=$(echo "${SILNITE}" | grep MRTVer | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Checks is MRT is out of date
if [ "$MRTVERSION" != "$MRTAVIL" ]; then
MRTRESULT="MRT is out-of-date!\nCurrent version is $MRTVERSION\nAvailable version is $MRTAVIL"
else
MRTRESULT="MRT is up-to-date"
fi

## Gatekeeper
# Finds Gatekeeper Version installed
GKVERSION=$(echo "${SILNITE}" | grep GatekeeperV | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Finds Gatekeeper Version available to update too.
GKAVIL=$(echo "${SILNITE}" | grep GatekeeperE | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Fallback If silnite was unable to check for updates
GKCURRENT=$(echo "${SILNITE}" | grep GateVer | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Checks is Gatekeeper is out of date
if [ "$GKVERSION" != "$GKAVIL" ]; then
GKRESULT="Gatekeeper is out-of-date!\nCurrent version is $GKVERSION\nAvailable version is $GKAVIL"
else
GKRESULT="Gatekeeper is up-to-date"
fi

## XProtect
# Finds XProtect Version installed
XPVERSION=$(echo "${SILNITE}" | grep XProtectV | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Finds XProtect Version available to update too.
XPAVIL=$(echo "${SILNITE}" | grep XProtectE | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Fallback if silnite was unable to check for updates
XPCURRENT=$(echo "${SILNITE}" | grep XproVer | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
# Checks if XProtect is out of date
if [ "$XPVERSION" != "$XPAVIL" ]; then
XPRESULT="XProtect is out-of-date!\nCurrent version is $XPVERSION\nAvailable version is $XPAVIL"
else
XPRESULT="XProtect is up-to-date"
fi

## SIP
# Cleans up the SIP Value. Also sets all to lower case, silnite for some reason give UC on Apple Silicon, and LC on Intel.
# tr sets all to lowercase.
SIPVALUE=$(echo "${SILNITE}" | grep -E System | grep -E Integrity | sed 's/^.*: //' | tr '[:upper:]' '[:lower:]')
## XProtect
XPVALUE=$(echo "${SILNITE}" | grep XPro\ \= | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')

# SIP status for dashboard.
if [[ "$SIPVALUE" = enabled* ]]; then
SIPSTATUS="SIP is enabled (woohoo)"
else
SIPSTATUS="SIP is disabled (boohoo)"
fi

# XProtect status for dashboard.
if [[ "$XPVALUE" == 1 ]]; then
XPSTATUS="XProtect is enabled (yah)"
else
XPSTATUS="XProtect is disabled (boo)"
fi

if [[ "$XPVALUE" != 1 ]] || [[ "$SIPVALUE" != enabled* ]]; then
echo "SIP or XProtect is disabled!\n$XPSTATUS\n$SIPSTATUS"
exit 200
fi

## Unable to check for updates. silnite will revert to just reporting currently installed versions, which is what this plugin will do. Shows as an informational warning.
if [[ -z "$MRTAVIL" ]] && [[ -z "$GKAVIL" ]] && [[ -z "$XPAVIL" ]] && (( "$WARNRUNCOUNT" >= "$WARNATTEMPTS" )); then
echo "$WARNRUNCOUNT attempts to check for updates have been made. This exceeds 'Unable to check for updates attempts' ($WARNATTEMPTS) set in the Preference Pane.\n\nCurrent versions installed:\nMRT Version: $MRTCURRENT\nGatekeeper Version: $GKCURRENT\nXProtect Version: $XPCURRENT\n\nPlus...\n$XPSTATUS\n$SIPSTATUS\n\n"
exit 2
## Alert (sent ticket/email) when silnite has not been able to check for updates as defined in the Preference Pane.
elif [[ -z "$MRTAVIL" ]] && [[ -z "$GKAVIL" ]] && [[ -z "$XPAVIL" ]] && (( "$WARNRUNCOUNT" < "$WARNATTEMPTS" )); then
WARNRUNCOUNT=$((WARNRUNCOUNT + 1))
defaults write $SILSETTINGS Unable_to_Check_Count $WARNRUNCOUNT
echo "Unable to check for updates at this time.\n\nCurrent versions installed:\nMRT Version: $MRTCURRENT\nGatekeeper Version: $GKCURRENT\nXProtect Version: $XPCURRENT\n\nPlus...\n$XPSTATUS\n$SIPSTATUS\n\nVisit https://eclecticlight.co/2019/08/01/silentknight-and-silnite-faq/ to manually review updates.\n\nUnable to check update attempts:$WARNRUNCOUNT\n"
exit 20
fi

# Updates available - Warn if any updates are available
if [[ "$UPDATESWAITING" == *"UpdateWaiting = 1"* ]]; then
echo "There are updates available!\n\n$MRTRESULT\n\n$GKRESULT\n\n$XPRESULT\n\n Other pending updates:\n$PENDINGUPDATE\n\n Running 'silnite au' from the computer (via Terminal/RMM/ARD) will show all available updates AND install any pending updates."
exit 2
fi

# All good, nothing to see here.
if [[ "$UPDATESWAITING" == *"UpdateWaiting = 0"* ]]; then
defaults write $SILSETTINGS Unable_to_Check_Count 0
echo "All looks good. No pending updates. Plus...\n$XPSTATUS\n$SIPSTATUS"
exit 0
fi